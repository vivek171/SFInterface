package com.htc.remedy.base;

import com.htc.remedy.constants.Constants;
import com.htc.remedy.constants.SFInterfaceConstants;
import com.htc.remedy.controller.SFInterfaceWhooshController;
import com.htc.remedy.domain.IndexerDomain;
import com.htc.remedy.model.IndexWritersModel;
import com.htc.remedy.model.SFInterfaceIndexerSyncModel;
import com.htc.remedy.repo.LucIndexerRepo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

import static com.htc.remedy.constants.SFInterfaceConstants.*;

@Component
public class ActiveMQBase implements BaseModel {

    private final
    LucIndexerRepo indexerrepo;

    private final
    JdbcTemplate jdbcTemplate;

    private final
    Map<String, IndexWritersModel> indexWriters;

    Logger logger = LoggerFactory.getLogger(SFInterfaceWhooshController.class);

    @Autowired
    public ActiveMQBase(LucIndexerRepo indexerrepo, JdbcTemplate jdbcTemplate, @Qualifier(value = "IndexerWriters") Map<String, IndexWritersModel> indexWriters) throws FileNotFoundException {
        this.indexerrepo = indexerrepo;
        this.jdbcTemplate = jdbcTemplate;
        this.indexWriters = indexWriters;
    }

    @JmsListener(destination = SFInterfaceConstants.INDEXER_UPDATE)
    public void indexerUpdate(IndexerDomain indexerDomain) {
        String[] ticketID = indexerDomain.getTicketID();
        String indexerKey = SFInterfaceBase.checkBlankorEmpty(indexerDomain.getIndexerkey()) ? indexerDomain.getIndexerkey() : "";
        indexerDomain = indexerrepo.findByNameAndStatussk(indexerDomain.getName(), Constants.INDEXER_STATUS_SK);
        indexerKey = SFInterfaceBase.checkBlankorEmpty(indexerKey) ? indexerKey : indexerDomain.getIndexerkey();

        String updatequery = fetchIndexerWhereCondition(indexerDomain.getQuery(), ticketID, indexerKey);
        indexerUpdate(indexerDomain, updatequery, ticketID);
        indexerUpdatewithDependency(indexerDomain.getName(), ticketID);
    }

    @JmsListener(destination = SFInterfaceConstants.INDEXER_SYNC)
    public void indexerUpdate(SFInterfaceIndexerSyncModel syncModel) {
        SFInterfaceBase.syncIndexer(syncModel.getAction(), syncModel.getIndexernames(), syncModel.getTicketids());
    }


    public static void indexerUpdatewithDependency(String indexerName, String[] ticketId) {
        //dependency table indexer update
    }

    public static String fetchIndexerWhereCondition(String indexerQuery, String[] ticketID, String indexerQueryKeyField) {
        String ticketIDQuery = Arrays.stream(ticketID)
                .map(ticketid -> "'" + ticketid + "'")
                .collect(Collectors.joining(COMMA));
        if (SFInterfaceBase.checkBlankorEmpty(indexerQuery))
            return indexerQuery + ESCAPE_CHARACTER_NEWLINE + WHERE + indexerQueryKeyField + " IN ( " + ticketIDQuery + " )";
        else
            return null;
    }

    public void indexerUpdate(IndexerDomain indexerDomain, String updatequery, String[] ticketID) {
        if (indexerDomain != null && SFInterfaceBase.checkBlankorEmpty(indexerDomain.getQuery()) && SFInterfaceBase.checkBlankorEmpty(indexerDomain.getIndexerkeyaliasname())) {
            try {
                SFInterfaceBase.updateindexer(indexWriters.get(indexerDomain.getName()).getIndexWriter(), indexerDomain.getName(), updatequery, indexerDomain.getIndexerkeyaliasname(), jdbcTemplate, ticketID);
                logger.info("Indexer sync:starts");
                SFInterfaceBase.syncIndexer(SFInterfaceConstants.INDEXER_UPDATE, new String[]{indexerDomain.getName()}, ticketID);
            } catch (IOException e) {
                logger.error(e.getMessage());
            }
            logger.info(indexerDomain.getName() + ":Updated");
        }
    }


}
