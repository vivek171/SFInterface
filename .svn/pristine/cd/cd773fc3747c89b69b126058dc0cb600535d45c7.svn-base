package com.htc.remedy.scheduler;

import com.htc.remedy.base.SFInterfaceBase;
import com.htc.remedy.config.IndexerUtilities;
import com.htc.remedy.config.JDBCConfiguration;
import com.htc.remedy.constants.SFInterfaceConstants;
import com.htc.remedy.domain.IndexerDomain;
import com.htc.remedy.model.IndexWritersModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import static com.htc.remedy.config.IndexerUtilities.fetchIndexers;
import static com.htc.remedy.constants.SFInterfaceConstants.COLON;

@Service
@Component
public class IndexerScheduler {
    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerScheduler.class);

    private static
    Map<String, JdbcTemplate> jdbcTemplateMap;

    private static
    Map<String, Map<String, IndexWritersModel>> indexWriters;

    @Autowired
    public IndexerScheduler(@Qualifier(value = "jdbcAccTemplate") Map<String, JdbcTemplate> jdbcTemplateMap,
                            @Qualifier(value = "IndexerWriters") Map<String, Map<String, IndexWritersModel>> indexWriters) {
        this.jdbcTemplateMap = jdbcTemplateMap;
        this.indexWriters = indexWriters;
    }


    @Scheduled(initialDelayString = "${cron.initialdelay}", fixedDelay = Long.MAX_VALUE)
    private void indexercreationOnStartUp() {
        indexerUpdate();
    }

    @Scheduled(cron = "${cron.expression}", zone = "${cron.zoneid}")
    private void indexerupdatecron() {
        indexerUpdate();
    }


   /* @Scheduled(cron = "1 * * ? * *")
    public void refreshJdbcTemplates() {
        jdbcTemplateMap = JDBCConfiguration.refreshJdbcTemplates();
        // this will execute on weekdays
    }
*/

    public static void indexerUpdate() {

        jdbcTemplateMap.entrySet().stream().forEach(
                stringJdbcTemplateEntry ->
                {
                    String path = "";
                    if (stringJdbcTemplateEntry.getKey().endsWith(SFInterfaceConstants.getDbRefConnectionName())) {
                        List<IndexerDomain> indexerDomains = fetchIndexers(stringJdbcTemplateEntry.getValue());

                        LOGGER.info("Indexer Update Started at:" + getcurrentdatetime());
                        for (IndexerDomain indexerDomain : indexerDomains) {
                            try {
                                path = IndexerUtilities.fetchpathbyConnectionName(stringJdbcTemplateEntry.getKey());
                                SFInterfaceBase.createIndexer(indexWriters.get(indexerDomain.getName()).get(
                                        path)
                                        , indexerDomain.getName(), indexerDomain.getQuery(), indexerDomain.getIndexerkeyaliasname(), stringJdbcTemplateEntry.getValue());
                            } catch (IOException e) {
                                LOGGER.error(path + COLON + indexerDomain.getName() + ":failed=>" + e.getMessage(), e);
                            }
                            LOGGER.info(path + COLON + indexerDomain.getName() + ":Created");
                        }
                        LOGGER.info("Indexer Creation Finished at:" + getcurrentdatetime());
                    }
                });
    }

  /*  public static void indexerUpdate() {

        jdbcTemplateMap.entrySet().parallelStream()
                .filter(stringJdbcTemplateEntry -> stringJdbcTemplateEntry.getKey().endsWith(SFInterfaceConstants.getDbRefConnectionName()))
                .forEach(
                        stringJdbcTemplateEntry ->
                        {
                            updateIndexers(stringJdbcTemplateEntry.getKey(), stringJdbcTemplateEntry.getValue());
                        });
    }



    public static void updateIndexers(String key, JdbcTemplate jdbcTemplate) {
        List<IndexerDomain> indexerDomains = fetchIndexers(jdbcTemplate);

        LOGGER.info("Indexer Update Started at:" + getcurrentdatetime());
        String path = IndexerUtilities.fetchpathbyConnectionName(key);
        indexerDomains.parallelStream().forEach(indexerDomain -> {
            updateIndexer(path, jdbcTemplate, indexerDomain);
        });
        LOGGER.info("Indexer Creation Finished at:" + getcurrentdatetime());
    }

    public static void updateIndexer(String path, JdbcTemplate jdbcTemplate, IndexerDomain indexerDomain) {
        try {
            SFInterfaceBase.createIndexer(indexWriters.get(indexerDomain.getName()).get(
                    path)
                    , indexerDomain.getName(), indexerDomain.getQuery(), indexerDomain.getIndexerkeyaliasname(), jdbcTemplate);
        } catch (IOException e) {
            LOGGER.error(path + COLON + indexerDomain.getName() + ":failed=>" + e.getMessage(), e);
        }
        LOGGER.info(path + COLON + indexerDomain.getName() + ":Created");
    }*/

    public static String getcurrentdatetime() {
        return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date());
    }


}
