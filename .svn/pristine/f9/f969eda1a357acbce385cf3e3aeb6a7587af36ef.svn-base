package com.htc.remedy.db;

import com.htc.remedy.domain.LDAPAccounts;
import com.htc.remedy.model.User;
import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.List;

@Component
@SuppressWarnings("Duplicates")
public class ReferenceDBConnector {

    private final
    ResourceLoader resourceLoader;


    @Autowired
    public ReferenceDBConnector(ResourceLoader resourceLoader) {
        this.resourceLoader = resourceLoader;
    }

    public List<LDAPAccounts> getLdapAccountsForClient(JdbcTemplate jdbcTemplate, String client) throws IOException {

        Resource resource = resourceLoader.getResource("classpath:sql/get_ad_account_for_clients.txt");
        String sql = IOUtils.toString(resource.getInputStream(), "UTF-8");

        return jdbcTemplate.query(String.format(sql, client), (resultSet, i) -> {
            LDAPAccounts ldapAccounts = new LDAPAccounts();

            ldapAccounts.setBase(resultSet.getString("Base_Url"));
            ldapAccounts.setClient(resultSet.getString("Client"));
            ldapAccounts.setConnName(resultSet.getString("ConnectionName"));
            ldapAccounts.setDomain(resultSet.getString("Domain"));
            ldapAccounts.setFilter(resultSet.getString("Filter"));
            ldapAccounts.setHost(resultSet.getString("Host"));
            ldapAccounts.setUsername(resultSet.getString("Username"));
            ldapAccounts.setPassword(resultSet.getString("Password"));
            ldapAccounts.setPort(resultSet.getInt("Port"));
            ldapAccounts.setSearchDN(resultSet.getString("SearchDN"));
            ldapAccounts.setPosttext(resultSet.getString("PostText"));
            ldapAccounts.setPretext(resultSet.getString("PreText"));
            return ldapAccounts;
        });
    }

 /*   public List<LDAPAccounts> getAllLdapAccounts() throws IOException {

        Resource resource = resourceLoader.getResource("classpath:sql/get_all_ad_account.txt");
        String sql = IOUtils.toString(resource.getInputStream(), "UTF-8");

        return jdbcTemplate.query(sql, (resultSet, i) -> {
            LDAPAccounts ldapAccounts = new LDAPAccounts();

            ldapAccounts.setBase(resultSet.getString("Base_Url"));
            ldapAccounts.setClient(resultSet.getString("Client"));
            ldapAccounts.setConnName(resultSet.getString("ConnectionName"));
            ldapAccounts.setDomain(resultSet.getString("Domain"));
            ldapAccounts.setFilter(resultSet.getString("Filter"));
            ldapAccounts.setHost(resultSet.getString("Host"));
            ldapAccounts.setUsername(resultSet.getString("Username"));
            ldapAccounts.setPassword(resultSet.getString("Password"));
            ldapAccounts.setPort(resultSet.getInt("Port"));
            ldapAccounts.setSearchDN(resultSet.getString("SearchDN"));
            ldapAccounts.setPosttext(resultSet.getString("PostText"));
            ldapAccounts.setPretext(resultSet.getString("PreText"));
            return ldapAccounts;
        });
    }*/

  /*  public User getUserLogin(String userName, String client) throws IOException {

        try {
            Resource resource = resourceLoader.getResource("classpath:sql/get_user_client.txt");
            String sql = IOUtils.toString(resource.getInputStream(), "UTF-8");

            return jdbcTemplate.queryForObject(String.format(sql, userName, client), (resultSet, i) -> {
                if (resultSet != null) {
                    User user = new User();
                    user.setClient(resultSet.getString("Client"));
                    // user.setAuthUserName(resultSet.getString("RemedyID") + "~" + client);
                    user.setUserID(resultSet.getString("UserID"));
                    user.setAuthUserName(userName + "~" + client + "~" + resultSet.getString("UserID"));
                    user.setNetworkLogin(resultSet.getString("NetworkLogin"));
                    return user;
                } else {
                    return null;
                }
            });
        } catch (Exception e) {
            return null;
        }
    }
*/

  /*  public User authenticateWithLocal(String userName, String password, String client) throws IOException {

        try {
            Resource resource = resourceLoader.getResource("classpath:sql/local_user_authentication.txt");
            String sql = IOUtils.toString(resource.getInputStream(), "UTF-8");
            return jdbcTemplate.queryForObject(String.format(sql, userName, password, client), (resultSet, i) -> {
                if (resultSet != null) {
                    User user = new User();
                    user.setClient(resultSet.getString("Client"));
                    user.setAuthUserName(resultSet.getString("RemedyID"));
                    user.setNetworkLogin(resultSet.getString("NetworkLogin"));
                    return user;
                } else {
                    return null;
                }
            });
        } catch (Exception e) {
            return null;
        }
    }*/

    public User authenticateWithLdapLocal(JdbcTemplate jdbcTemplate, String userName, String password, String client) throws IOException {

        try {
            Resource resource = resourceLoader.getResource("classpath:sql/ldap_user_sync_authentication.txt");
            String sql = IOUtils.toString(resource.getInputStream(), "UTF-8");
            return jdbcTemplate.queryForObject(String.format(sql, userName, password, client), (resultSet, i) -> {
                if (resultSet != null) {
                    User user = new User();
                    user.setClient(resultSet.getString("Client"));
                    user.setAuthUserName(resultSet.getString("RemedyID"));
                    user.setNetworkLogin(resultSet.getString("NetworkLogin"));
                    return user;
                } else {
                    return null;
                }
            });
        } catch (Exception e) {
            return null;
        }
    }

    public User authenticateUserLocal(JdbcTemplate jdbcTemplate, String userName, String password, String testingmodeenabled) throws IOException {

        try {
            Resource resource;
            if (testingmodeenabled.equalsIgnoreCase("local"))
                resource = resourceLoader.getResource("classpath:sql/local_user_authenticate_procedure.txt");
            else
                resource = resourceLoader.getResource("classpath:sql/ad_user_authenticate_procedure.txt");

            String sql = IOUtils.toString(resource.getInputStream(), "UTF-8");
            return jdbcTemplate.queryForObject(String.format(sql, password, userName), (resultSet, i) -> {
                if (resultSet != null) {
                    User user = new User();
                    user.setClient(resultSet.getString("Account"));
                    user.setAuthUserName(resultSet.getString("RemedyID"));
                    user.setNetworkLogin(resultSet.getString("NetworkLogin"));
                    user.setLocalusername(resultSet.getString("UserID"));
                    user.setUserID(resultSet.getString("User_sk"));
                    return user;
                } else {
                    return null;
                }
            });
        } catch (Exception e) {
            return null;
        }
    }

    public void syncLdapPassword(JdbcTemplate jdbcTemplate, String userName, String password, String client) throws IOException {

        try {
            Resource resource = resourceLoader.getResource("classpath:sql/update_ldap_password_sync.txt");
            String sql = IOUtils.toString(resource.getInputStream(), "UTF-8");
            jdbcTemplate.execute(String.format(sql, userName, password, client));
        } catch (Exception e) {
            //return null;
        }
    }
}
