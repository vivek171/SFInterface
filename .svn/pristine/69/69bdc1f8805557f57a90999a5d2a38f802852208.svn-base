package com.htc.remedy.core;

import org.apache.lucene.store.Directory;
import org.apache.lucene.store.SimpleFSDirectory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

@Component
public class IndexerUtil {

    @Value("${app.caretech.search.index-base-path}")
    String basePath;

/*
    public void purgeAllFiles(File dir) throws IOException {
        for (File file : dir.listFiles()) {
            if (!file.isDirectory())
                file.delete();
        }
    }
*/

 /*   public Directory createIndexerDirectory(String dirName) throws IOException {
        Path indexFile = Paths.get(basePath, dirName);
        if (!indexFile.toFile().exists()) {
            indexFile.toFile().mkdirs();
        } else {
            purgeAllFiles(indexFile.toFile());
        }

        Directory index = new SimpleFSDirectory(indexFile);
        return index;
    }

    public Directory updateIndexerDirectory(String dirName) throws IOException {
        Path indexFile = Paths.get(basePath, dirName);
        if (!indexFile.toFile().exists()) {
            indexFile.toFile().mkdirs();
        } else {
            //purgeAllFiles(indexFile.toFile());
        }

        Directory index = new SimpleFSDirectory(indexFile);
        return index;
    }
*/
    public Directory getIndexDirectory(String dirName) throws IOException {
        Path indexFile = Paths.get(basePath, dirName);
        if (!isValidIndexFile(indexFile.toFile()))
            throw new IOException("INDEXER NOT FOUND OR LOCKED :" + dirName);
        Directory index = new SimpleFSDirectory(indexFile);
        return index;
    }


    public Boolean isValidIndexFile(File file) {
        if (
                !file.isHidden()
                        && file.exists()
                        && file.canRead()
                ) {
            return Boolean.TRUE;
        }
        return Boolean.FALSE;
    }

}
