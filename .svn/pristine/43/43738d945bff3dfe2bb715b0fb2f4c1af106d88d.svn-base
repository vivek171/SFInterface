package com.htc.remedy.scheduler;

import com.htc.remedy.base.SFInterfaceBase;
import com.htc.remedy.constants.Constants;
import com.htc.remedy.domain.IndexerDomain;
import com.htc.remedy.model.IndexWritersModel;
import com.htc.remedy.repo.LucIndexerRepo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Service
@Component
public class IndexerScheduler {
    private static final Logger LOGGER = LoggerFactory.getLogger(IndexerScheduler.class);

    private final
    LucIndexerRepo indexerrepo;

    private final
    JdbcTemplate jdbcTemplate;

    private final
    Map<String, IndexWritersModel> indexWriters;

    @Autowired
    public IndexerScheduler(LucIndexerRepo indexerrepo, JdbcTemplate jdbcTemplate, @Qualifier(value = "IndexerWriters") Map<String, IndexWritersModel> indexWriters) throws FileNotFoundException {
        this.indexerrepo = indexerrepo;
        this.jdbcTemplate = jdbcTemplate;
        this.indexWriters = indexWriters;
    }


    @Scheduled(initialDelayString ="${cron.initialdelay}" ,fixedDelay = Long.MAX_VALUE)
    private void indexercreationOnStartUp() {
        indexerupdate();
    }

    @Scheduled(cron = "${cron.expression}",zone = "${cron.zoneid}")
    private void indexerupdatecron() {
        indexerupdate();
    }

    public void indexerupdate() {
        List<IndexerDomain> indexerDomains = indexerrepo.findByStatussk(Constants.INDEXER_STATUS_SK);
        LOGGER.info("Indexer Update Started at:" + getcurrentdatetime());
        for (IndexerDomain indexerDomain : indexerDomains) {
            try {
                SFInterfaceBase.createIndexer(indexWriters.get(indexerDomain.getName()), indexerDomain.getName(), indexerDomain.getQuery(), indexerDomain.getIndexerkeyaliasname(), jdbcTemplate);
            } catch (IOException e) {
                LOGGER.error(indexerDomain.getName() + ":failed=>" + e.getMessage(),e);
            }
            LOGGER.info(indexerDomain.getName() + ":Created");
        }
        LOGGER.info("Indexer Creation Finished at:" + getcurrentdatetime());
    }

    public static String getcurrentdatetime() {
        return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date());
    }

}
